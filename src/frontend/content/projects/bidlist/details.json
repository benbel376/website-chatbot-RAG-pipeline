{
    "metadata": {
        "version": "2",
        "lastUpdated": "2024-03-20"
    },
    "sections": [{
            "loader": "hero-loader",
            "version": "1",
            "value": {
                "banner": "bidlist.jpg",
                "title": "Digital Ad Inventory Bidding"
            }
        },
        {
            "loader": "overview-loader",
            "version": "1",
            "value": {
                "description": "The objective of this project was to design a scalable, data-driven bidlist optimization algorithm for real-time bidding (RTB) on The Trade Desk (TTD) platform...",
                "keyFeatures": [{
                        "title": "Real-time Optimization",
                        "description": "Dynamic bid adjustment based on real-time performance metrics",
                        "icon": "flash-outline"
                    },
                    {
                        "title": "Machine Learning Pipeline",
                        "description": "Automated feature engineering and model retraining",
                        "icon": "brain-outline"
                    },
                    {
                        "title": "Scalable Architecture",
                        "description": "Handles millions of bid requests per second",
                        "icon": "layers-outline"
                    }
                ],
                "problem": "Traditional bidding systems lack real-time optimization capabilities, leading to inefficient ad spend and suboptimal campaign performance.",
                "solution": "Developed an ML-powered system that dynamically adjusts bids based on real-time performance data and historical patterns."
            }
        },
        {
            "loader": "tech-loader",
            "version": "1",
            "value": [
                "Linux",
                "Python 3.8+",
                "Google Cloud SDK",
                "Docker",
                "Docker Compose",
                "BigQuery",
                "Pandas and NumPy",
                "Scikit-Learn",
                "SQLAlchemy",
                "PostgreSQL",
                "Scipy",
                "Apache Spark"
            ]
        },
        {
            "loader": "structure-loader",
            "version": "1",
            "value": {
                "name": "Bidlist Optimization Project",
                "folders": [{
                    "name": "src",
                    "size": "200 KB",
                    "subfolders": [{
                            "name": "data",
                            "size": "20 KB",
                            "files": [{
                                "name": "biddatatable.csv",
                                "description": "Sample Data"
                            }]
                        },
                        {
                            "name": "scripts",
                            "size": "100 KB",
                            "files": [{
                                    "name": "bidlist_optimization.py",
                                    "description": "Main Script"
                                },
                                {
                                    "name": "feature_selection.py",
                                    "description": "Feature Engineering"
                                }
                            ]
                        }
                    ],
                    "files": [{
                            "name": "README.md",
                            "type": "html5"
                        },
                        {
                            "name": "requirements.txt",
                            "type": "file-code-o"
                        }
                    ]
                }]
            }
        },
        {
            "loader": "showcase-loader",
            "version": "1",
            "value": {
                "images": [{
                        "url": "dashboard-overview.png",
                        "caption": "Real-time bidding dashboard showing key metrics",
                        "type": "screenshot"
                    },
                    {
                        "url": "architecture-diagram.png",
                        "caption": "System architecture and data flow",
                        "type": "diagram"
                    }
                ],
                "videos": [{
                    "url": "bidding-demo.mp4",
                    "caption": "Demo of the real-time bidding process",
                    "thumbnail": "bidding-demo-thumb.jpg"
                }]
            }
        },
        {
            "loader": "repo-loader",
            "version": "1",
            "value": {
                "url": "https://github.com/your-username/bidlist-optimization",
                "label": "Bidlist Optimization on GitHub",
                "stats": {
                    "stars": 45,
                    "forks": 12,
                    "contributors": 3
                }
            }
        },
        {
            "loader": "code-loader",
            "version": "1",
            "value": {
                "title": "Key Implementation Highlights",
                "blocks": [{
                        "title": "Complex Python Example",
                        "language": "python",
                        "highlights": [4, 12, 18],
                        "code": "from __future__ import annotations\nfrom typing import List, Optional, Dict, Any\nimport asyncio\nfrom dataclasses import dataclass, field\n\n@dataclass \nclass CacheConfig:\n    ttl: int = 3600  # Time to live in seconds\n    max_size: int = 1000\n    cleanup_interval: float = 300.0\n\n    def __post_init__(self) -> None:\n        if self.ttl <= 0:\n            raise ValueError(f'Invalid TTL: {self.ttl}')\n\nclass Cache:\n    '''A simple cache implementation with TTL support.\n    \n    Example:\n        cache = Cache(CacheConfig(ttl=3600))\n        cache['key'] = 'value'  # Expires in 1 hour\n    '''\n    def __init__(self, config: CacheConfig) -> None:\n        self._data: Dict[str, Any] = {}\n        self._config = config\n        self._task: Optional[asyncio.Task] = None\n\n    async def cleanup(self) -> None:\n        try:\n            while True:\n                # Use list comprehension for cleanup\n                expired = [k for k, v in self._data.items()\n                          if self._is_expired(v)]\n                \n                if expired:  # Only log if items were removed\n                    print(f'Removing {len(expired)} expired items')\n                    [self._data.pop(k) for k in expired]\n                \n                await asyncio.sleep(self._config.cleanup_interval)\n        except asyncio.CancelledError:\n            print('Cleanup task cancelled')\n            raise\n\n@dataclass\nclass DataProcessor:\n    config: Dict[str, Any]\n    cache: Optional[Cache] = None\n    stats: Dict[str, int] = field(default_factory=dict)\n\n    async def process_data(self, items: List[dict]) -> None:\n        \"\"\"Process items with advanced Python features.\"\"\"\n        try:\n            # Multiple comprehensions and walrus operator\n            results = [\n                (key := f'item_{item[\"id\"]}', value)\n                for item in items\n                if item['active']\n                if (value := self._transform(item)) is not None\n            ]\n\n            # Async comprehension\n            async for result in self._process_results(results):\n                if (cache := self.cache) is not None:\n                    cache[result['key']] = result\n                    self.stats['cached'] = self.stats.get('cached', 0) + 1\n                    \n                print(f'Processed {result[\"key\"]} with {result[\"value\"]=}')\n\n        except Exception as e:\n            logger.error(f'Error processing data: {e!r}')\n            raise ProcessingError('Failed to process items') from e\n\n    def _transform(self, item: dict) -> Optional[float]:\n        # Match statement (Python 3.10+)\n        match item['type']:\n            case 'numeric' if (val := float(item['raw'])) > 0:\n                return val * self.config.get('multiplier', 1.0)\n            case 'text' if len(text := item['raw'].strip()) > 0:\n                return float(text) if text.replace('.', '').isdigit() else None\n            case _:\n                return None\n\n    async def _process_results(self, results):\n        for key, value in results:\n            yield {'key': key, 'value': value}\n\n    def __str__(self) -> str:\n        return f'{self.__class__.__name__}(items={len(self.stats)}))'\n"
                    },
                    {
                        "title": "Advanced JS Example",
                        "language": "javascript",
                        "highlights": [3, 8, 15],
                        "code": "// Modern JavaScript features demonstration  \nconst processData = async ({ items = [], config: { threshold = 0 } = {} }) => {\n  const results = new Map();\n\n  try {\n    for await (const item of items) {\n      // Optional chaining and nullish coalescing  \n      const value = item?.data?.value ?? 0;\n      \n      if (value > threshold) {\n        results.set(item.id, {\n          ...item,\n          processed: true,\n          timestamp: new Date().toISOString()\n        });\n\n        // Template literal with expression\n        console.log(`Processed item ${item.id} with value: ${value}`);\n      }\n    }\n  } catch (error) {\n    console.error(`Processing failed: ${error?.message}`)\n  }\n\n  return Object.fromEntries(results);\n};\n"
                    },
                    {
                        "title": "Advanced CSS Example",
                        "language": "css",
                        "highlights": [4, 12, 22],
                        "code": "/* Complex CSS with modern features */\n@media (prefers-color-scheme: dark) {\n    :root {\n        --primary-color: hsl(220, 70%, 50%);\n        --text-color: rgb(240, 240, 240);\n    }\n}\n\n.container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: clamp(1rem, 2vw, 2rem);\n    padding: max(2vh, 20px);\n}\n\n#main-card {\n    background: linear-gradient(\n        45deg,\n        var(--primary-color),\n        color-mix(in srgb, var(--primary-color), #000 30%)\n    );\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card:is(:hover, :focus-visible) {\n    transform: translateY(-5px);\n    box-shadow: var(--shadow-2);\n}\n\n@container card (min-width: 300px) {\n    .card__content {\n        padding: calc(var(--spacing) * 2);\n        font-size: clamp(1rem, 1.5vw, 1.25rem);\n    }\n}\n"
                    }
                ]
            }
        }
    ]
}